generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Person {
  id String @id @default(cuid())

  // The crgaid is 'AAAAAYYYY', and only for competitors. Does not change.
  crgaid String? @unique

  alias String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email           String? @unique
  discordUsername String? @unique
  youtubeId       String? @unique
  kofiDisplayName String? @unique
  speedrunComId   String? @unique

  active         Boolean @default(true)
  topContributor Boolean @default(false)

  contributions Contribution[]
  kofiDonations KofiDonation[]
  superThanks   SuperThanks[]
  superChats    SuperChat[]
  standings     TournamentFinalStanding[]
  results       TournamentRoundResult[]
  personalBests PersonalBest[]
  simpleELOs    SimpleELO[]
}

////////////////////////////////////////////////////////////////////////////////
model Event {
  id Int @id @default(autoincrement())

  name      String
  shortName String
  uriName   String @unique

  createdAt DateTime @default(now())

  tournaments            Tournament[]
  personalBests          PersonalBest[]
  simpleELOs             SimpleELO[]
  tournamentRoundResults TournamentRoundResult[]
}

model Tournament {
  id Int @id @default(autoincrement())

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  name      String
  shortName String   @unique
  date      DateTime

  event_order Int

  standings     TournamentFinalStanding[]
  results       TournamentRoundResult[]
  personalBests PersonalBest[]
}

model TournamentFinalStanding {
  id Int @id @default(autoincrement())

  tournamentId Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  personId String
  person   Person @relation(fields: [personId], references: [id])

  standing Int
}

model TournamentRoundResult {
  id Int @id @default(autoincrement())

  tournamentId Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  personId String
  person   Person @relation(fields: [personId], references: [id])

  roundNumber Int
  // 0 | SUCCESS. The person successfully started and completed the
  //   | speedrun within the time limit.
  // 1 | WLK. This person got a 'walkover' and won because every other
  //   | scheduled person did not start or otherwise forfeited.
  // 2 | DNF. The person did not finish the speedrun.
  // 3 | DNS. The person did not start the speedrun.
  resultCode  Int

  elapsedMilliseconds Int
  accruedPoints       Int
  PersonalBest        PersonalBest[]
}

////////////////////////////////////////////////////////////////////////////////
model PersonalBest {
  id Int @id @default(autoincrement())

  personId String
  person   Person @relation(fields: [personId], references: [id])

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  tournamentId Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  standing                Int
  tournamentRoundResultId Int
  result                  TournamentRoundResult @relation(fields: [tournamentRoundResultId], references: [id])
}

model SimpleELO {
  id Int @id @default(autoincrement())

  personId String
  person   Person @relation(fields: [personId], references: [id])

  eventId Int
  event   Event @relation(fields: [eventId], references: [id])

  standing  Int
  simpleELO Int
}

////////////////////////////////////////////////////////////////////////////////
model Contribution {
  id Int @id @default(autoincrement())

  personId    String
  contributor Person @relation(fields: [personId], references: [id])

  createdAt   DateTime @default(now())
  description String
}

model KofiDonation {
  id Int @id @default(autoincrement())

  personId    String?
  contributor Person? @relation(fields: [personId], references: [id])
  buyerEmail  String
  from        String

  createdAt         DateTime @default(now())
  kofiTransactionId String   @unique
  amount            String
  currency          String
}

model SuperThanks {
  id Int @id @default(autoincrement())

  personId      String?
  contributor   Person? @relation(fields: [personId], references: [id])
  youtubeId     String?
  youtubeHandle String

  createdAt        DateTime? @default(now())
  youtubeCommentId String    @unique
  amount           String
}

model SuperChat {
  id Int @id @default(autoincrement())

  personId      String?
  contributor   Person? @relation(fields: [personId], references: [id])
  youtubeId     String
  youtubeHandle String

  createdAt          DateTime @default(now())
  youtubeSuperChatId String   @unique
  amount             String
}

////////////////////////////////////////////////////////////////////////////////
model MailingList {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  active      Boolean   @default(false)
  contactedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
